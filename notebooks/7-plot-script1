### A Pluto.jl notebook ###
# v0.15.1

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ╔═╡ 297ff700-ebcc-11eb-22f0-77c734d7bf4d
begin
	using DrWatson
	
	quickactivate("C:\\Users\\kevin\\Documents\\MyDocuments\\1-Research_projects\\1-project-categorical-MMN","1-project-categorical-MMN")
	push!(LOAD_PATH,srcdir())

end

# ╔═╡ 6b746196-be0f-47a3-9512-6a70a77b48a4
begin
	using Revise
	using MyNeurosciencePackage
	using CairoMakie
	using Parameters, JLD2, Statistics	
	using DataFrames, PlutoUI
	
	
	set_theme!(theme_light())

	
end

# ╔═╡ b061c950-0369-45ce-9e55-79442a1829b7
md""" # Presentation for 07/25 meeting

Script that analyzes the general structure of two local microcircuits, plot the figures for script1 & 2 


"""

# ╔═╡ 4a7d92c1-203c-43e2-b6ae-43023008a440
begin
	# Plots variables
	noto_sans = assetpath("fonts", "NotoSans-Regular.ttf")
noto_sans_bold = assetpath("fonts", "NotoSans-Bold.ttf")

end

# ╔═╡ 1fb29f97-0611-4a55-9b27-9fa1c944c46f
md""" # Parameters of the neural circuit

- Adaptation to pyramidal cells

### Depression
- Integrator to dendrites
- E to VIP (long range) (Karnani et al 2016)
- PV to E
- E to PV
- E to VIP

### Facilitation
- Long range E to SST (Lee et al 2013)
- E to SST (local)
- VIP and SST




"""

# ╔═╡ 10f66877-0d09-4820-ad32-ed41afdcfcf0
md"""
$(LocalResource("C:\\Users\\kevin\\Documents\\MyDocuments\\1-Research_projects\\1-project-categorical-MMN\\_research\\Meetings\\with_XJ\\2 local circuit_210725_223017.jpg"))
"""

# ╔═╡ 9836a960-2172-49f9-809b-2175d86ce6c0
md""" # Parameters of the task

- Only two neural local circuits (interconnected)
-  $f_1$ is the frequency of stimulus 1
-  $v_1$ is the strength of the stimulus corresponding to $f_1$
-  $v_2$ is the strength of the stimulus corresponding to $f_2=1-f_1$


0.5 seconds for stimulus time

1 second interstimuli time (to be varied)

2 minutes for the task (to speed up simulations)

"""

# ╔═╡ ecfb4d83-67b5-45c1-b54c-24d422b0577d
md""" # Simulations of the neural circuit


"""

# ╔═╡ 782503e9-9358-4dbc-8232-005710bac4f2
begin
# generate some dynamics for the figures
	
	
function construct_one_local_microcircuit_integrator!(c::microcircuit; dend_param=dendrites_param_sigmoid(0.12, -7.0, -0.482, 0.00964, 0.19624, 0.0), facilitation=false, adaptation=false, depression=false, td_to_vip=true,integrator_tc = 0.8)
        # once the network will be setup with more microcuicuit. It will be necessary to add the microcircuit in the name
    
    vip1 = vip_cell(name=string(c.name, "-", "vipcell1"), Ibg=0.25)
    sst1 = sst_cell(name=string(c.name, "-", "sstcell1"), Ibg=0.25, adaptation_boolean=true)
    pv1 = pv_cell(name=string(c.name, "-", "pvcell1"), Ibg=0.29)
    dend1 = dend_sigmoid(param_c=dend_param, name=string(c.name, "-", "dend1"))
    E1 = soma_PC(den=dend1, adaptation_boolean=adaptation, name=string(c.name, "-", "ecell1"))
    integrator1 = neural_integrator(τ = integrator_tc, name=string(c.name, "-", "integrator1"))
        
        
    push!(dend1.list_syn, gaba_syn(τ=10 * 0.001, neuron_pre=sst1, neuron_post=dend1, g=-0.09, name=string(c.name, "-", "sst1-to-dend1")))# 0.09
    push!(E1.list_syn, gaba_syn(neuron_pre=pv1, neuron_post=E1, g=-0.001, depression=true, name=string(c.name, "-", "pv1-to-ecell1")))# -0.001
    push!(E1.list_syn, nmda_syn(neuron_pre=E1, neuron_post=E1, g=0.18, name=string(c.name, "-", "ecell1-to-ecell1")))
        
    push!(vip1.list_syn, nmda_syn(neuron_pre=E1, neuron_post=vip1, g=0.058, depression=true, name=string(c.name, "-", "ecell1-to-vip1")))
    push!(vip1.list_syn, gaba_syn(neuron_pre=sst1, neuron_post=vip1, g=-0.1, facilitation=true, name=string(c.name, "-", "sst1-to-vip1")))
        
    push!(sst1.list_syn, nmda_syn(neuron_pre=E1, neuron_post=sst1, g=0.0435, facilitation=true, name=string(c.name, "-", "ecell1-to-sst1")))
    push!(sst1.list_syn, gaba_syn(neuron_pre=vip1, neuron_post=sst1, g=-0.05, facilitation=true, name=string(c.name, "-", "ss1-to-dend1")))
        
    push!(pv1.list_syn, nmda_syn(neuron_pre=E1, neuron_post=pv1, g=0.04435, depression=true, name=string(c.name, "-", "ecell1-to-pv1")))# 0.0435
    push!(pv1.list_syn, gaba_syn(neuron_pre=sst1, neuron_post=pv1, g=-0.17, name=string(c.name, "-", "sst1-to-pv1")))# -0.17
    push!(pv1.list_syn, gaba_syn(neuron_pre=pv1, neuron_post=pv1, g=-0.18, name=string(c.name, "-", "pv1-to-pv1")))
        
           
       
    push!(vip1.list_syn, nmda_syn(neuron_pre=integrator1, neuron_post=vip1, g=0.47, depression=depression, name=string(c.name, "-", "integrator1-to-vip1")))
    push!(pv1.list_syn, nmda_syn(neuron_pre=integrator1, neuron_post=pv1, g=0.31, depression=depression, name=string(c.name, "-", "integrator1-to-pv1")))
        
            
    push!(sst1.list_syn, nmda_syn(neuron_pre=integrator1, neuron_post=sst1, g=0.22, facilitation=facilitation, name=string(c.name, "-", "integrator1-to-sst1")))
            
    push!(integrator1.list_syn, nmda_syn(neuron_pre=E1, neuron_post=integrator1, g=0.15, name=string(c.name, "-", "ecell1-to-integrator1")))
    
    push!(dend1.list_syn, nmda_syn(neuron_pre=integrator1, neuron_post=dend1, g=0.4, depression=true, name=string(c.name, "-", "integrator1-to-dend1")))	
            
            
    push!(c.list_dend, dend1)
      
    push!(c.list_soma, E1)
       
    push!(c.list_vip, vip1)
      
    push!(c.list_sst, sst1)
      
    push!(c.list_pv, pv1)
    
    push!(c.list_integrator, integrator1)
    
    
    
end
    
    # TODO add a list of microcircuit as argument to the dynamics functions
    
function construct_two_local_microcircuit_integrator(; dend_param=dendrites_param_sigmoid(0.12, -7.0, -0.482, 0.00964, 0.19624, 0.0), facilitation=false, adaptation=false, depression=false, td_to_vip=true, τ_integrator = 0.8)
        # once the network will be setup with more microcuicuit. It will be necessary to add the microcircuit in the name
    
    
    c1 = microcircuit(name="microcircuit1")
    c2 = microcircuit(name="microcircuit2")
        
    construct_one_local_microcircuit_integrator!(c1; dend_param, facilitation, adaptation, td_to_vip, depression, integrator_tc = τ_integrator)
    construct_one_local_microcircuit_integrator!(c2; dend_param, facilitation, adaptation, td_to_vip, depression, integrator_tc = τ_integrator)
    
    
    push!(c1.list_sst[1].list_syn, nmda_syn(neuron_pre=c2.list_soma[1], neuron_post=c1.list_sst[1], g=0.0435, facilitation=true, name=string("ecell2-to-sst1")))
    push!(c2.list_sst[1].list_syn, nmda_syn(neuron_pre=c1.list_soma[1], neuron_post=c2.list_sst[1], g=0.0435, facilitation=true, name=string("ecell1-to-sst2")))
    
    push!(c1.list_dend[1].list_syn, nmda_syn(neuron_pre=c2.list_integrator[1], neuron_post=c1.list_dend[1], g=0.1, depression=true, name=string("integrator2-to-ecell1")))
    push!(c2.list_dend[1].list_syn, nmda_syn(neuron_pre=c1.list_integrator[1], neuron_post=c2.list_dend[1], g=0.1, depression=true, name=string("integrator1-to-ecell2")))
    
            
            
            
    list_microcircuit = [c1,c2]
    
    return list_microcircuit
end
    
	
	
	
	
end

# ╔═╡ 14b7bff5-da85-4d96-baab-170136c272f2
md"""

Frequency for the stimulus to circuit 1: 
$@bind f1 NumberField(0:1.0, default=0.9)


Duration of simulation:
$@bind Tfin NumberField(0:120, default=20)


Value of stim to circuit 1:
$@bind value_stim_f1 NumberField(0:1.0, default=0.2)


Value of stim to circuit 2:
$@bind value_stim_f2 NumberField(0:1.0, default=0.0)


Interstimulus time:
$@bind Tinter NumberField(0:2.0, default=1.0)


Stimulus time:
$@bind Tstim NumberField(0:2.0, default=0.5)

"""

# ╔═╡ ae6e757d-2c26-4933-8a2e-cba17228ea1f
begin
	
	
	
#	f1 = 0.2
	f2 = 1-f1
	#value_stim_f1 = 0.2
	#value_stim_f2 = 0.0
	#Tfin = 60.0
	dt = 0.0005
	#Tinter = 1.0
	#Tstim = 0.5
	t_tot = Int64(Tfin/dt)
	lc = construct_two_local_microcircuit_integrator(facilitation=true, depression = true, adaptation = true)
	sim = simulation_parameters(Tfin=10.0)

	sim.Tfin = Tfin
	t_tot +=2000
	oddball=Dict(
"microcircuit1-vipcell1" =>zeros(t_tot), 
"microcircuit1-sstcell1" =>zeros(t_tot),
"microcircuit1-pvcell1" =>zeros(t_tot),
"microcircuit1-ecell1" =>zeros(t_tot),
"microcircuit1-integrator1" =>zeros(t_tot),
"microcircuit2-vipcell1" =>zeros(t_tot),
"microcircuit2-sstcell1" =>zeros(t_tot),
"microcircuit2-pvcell1" =>zeros(t_tot),
"microcircuit2-ecell1" =>zeros(t_tot),
"microcircuit2-integrator1" =>zeros(t_tot)
)
	
	array_stim_f1 = zeros(floor(Int,Tfin/dt))
	array_stim_f2 = zeros(floor(Int,Tfin/dt))

	nbr_stim = floor(Int,Tfin/(Tinter + Tstim))
	temp_index_stim = 0
	while temp_index_stim < nbr_stim-1
		
		if rand()<f1
		array_stim_f1[floor(Int,1+temp_index_stim*(Tinter+Tstim)/dt):floor(Int,(temp_index_stim+1)*(Tinter+Tstim)/dt)] = [zeros(floor(Int,Tinter/dt)) ; value_stim_f1*ones(floor(Int,Tstim/dt))]
			
		array_stim_f2[floor(Int,1+temp_index_stim*(Tinter+Tstim)/dt):floor(Int,(temp_index_stim+1)*(Tinter+Tstim)/dt)] = [zeros(floor(Int,Tinter/dt)) ; value_stim_f2*ones(floor(Int,Tstim/dt))]
		else
			
			array_stim_f1[floor(Int,1+temp_index_stim*(Tinter+Tstim)/dt):floor(Int,(temp_index_stim+1)*(Tinter+Tstim)/dt)] = [zeros(floor(Int,Tinter/dt)) ; value_stim_f2*ones(floor(Int,Tstim/dt))]
			
			array_stim_f2[floor(Int,1+temp_index_stim*(Tinter+Tstim)/dt):floor(Int,(temp_index_stim+1)*(Tinter+Tstim)/dt)] = [zeros(floor(Int,Tinter/dt)) ; value_stim_f1*ones(floor(Int,Tstim/dt))]
		end
			
			temp_index_stim +=1
				
	end
	
	oddball["microcircuit1-ecell1"] = [0.1*ones(2000);array_stim_f1]
	oddball["microcircuit2-ecell1"] = [0.1*ones(2000);array_stim_f2]
	
	
	full_time_dynamics(lc,sim,oddball)
	
	
end

# ╔═╡ 0abb83ce-a761-4939-b4f2-36c25bcf5fd5
begin
	fig = plot_local_circuit(lc,sim,oddball)
	fig
end

# ╔═╡ e6dd98f5-da6d-42cb-a04e-374cf97c0be8


# ╔═╡ 7b3f6f1b-4c6a-4fa2-86c7-6e3eb8c5ab6e
md""" ### Influence of frequency on the firing rate

"""

# ╔═╡ b74119b3-be26-4ef9-97c8-60ad88f936f6
begin
    fig1 = Figure( font = noto_sans)
	
	
    ax1 = fig1[1, 1] = Axis(fig1, title = "Mean firing rate vs frequencies", xlabel="Frequencies f_1", ylabel = "mean firing rate")
	
	for vf1 in 0.1:0.1:0.5
	
		fig1_dict = Dict(
	"f1" => collect(0.1:0.1:0.9),
	"value_stim_f1" => vf1,
	"Tinter" => 1.0,
	"Tstim" => 0.5,
	"Tfin" => 120.0,
	"value_stim_f2" => 0.0
)
	
	fig1_list = zeros(length(collect(0.1:0.1:0.9)))
	
	for (i,dict_temp) in enumerate(dict_list(fig1_dict))
		
		data = load(datadir("sims","script1",savename("oddball_task",dict_temp,"jld2")))

	mean_value = get_mean_firing_rate(data,"microcircuit1-ecell1","current-to-e1",dict_temp["value_stim_f1"])
		
		fig1_list[i]= mean_value
	end
	
	
	lines!(ax1,collect(0.1:0.1:0.9),fig1_list,linewidth=5,label="value stim = $vf1")
	
end
	fig1[1, 2] = Legend(fig1, ax1, "Legend", framevisible = false)

	
	fig1
end

# ╔═╡ 97e728c0-661d-459c-91ea-46ecd4a2f592
begin
	
	map_xaxis = collect(0.1:0.1:0.5)
	map_yaxis = collect(0.0:0.1:0.5)
	
	map_Δfiring_rate = zeros(length(map_xaxis),length(map_yaxis))
	
	for (i,vf1) in enumerate(collect(0.1:0.1:0.5))
		
		for (j,vf2) in enumerate(collect(0.0:0.1:0.5))
			
			fig1_dict = Dict(
	"f1" => collect(0.1:0.1:0.9),
	"value_stim_f1" => vf1,
	"Tinter" => 1.0,
	"Tstim" => 0.5,
	"Tfin" => 120.0,
	"value_stim_f2" => vf2
)
				mean_value_list = zeros(length(collect(0.1:0.1:0.9)))

			for (k,dict_temp) in enumerate(dict_list(fig1_dict))
		data = load(datadir("sims","script1",savename("oddball_task",dict_temp,"jld2")))

	mean_value = get_mean_firing_rate(data,"microcircuit1-ecell1","current-to-e1",dict_temp["value_stim_f1"])
				
						mean_value_list[k]= mean_value

			end
			
			Δf = mean_value_list[1] - mean_value_list[end]
			
			map_Δfiring_rate[i,j] = Δf
			
		end
		
	end
	
	
	
end

# ╔═╡ 09a3fdb0-963f-4b24-87d8-90ce6f119a78
begin
	
	fig2 = Figure()
	ax = Axis(fig2[1,1], xlabel = "value stimulus f_1", ylabel = "value stimulus f_2",title="Δfiring rate between 0.1 et 0.9 frequency (Hz)")
	
	for i=1:5 map_Δfiring_rate[i,(i+2):end] .= NaN  end
	
	hm = heatmap!(ax, map_xaxis, map_yaxis, map_Δfiring_rate, colormap = :reds)
	Colorbar(fig2[1,2], hm)
	fig2
end

# ╔═╡ 19c61b2b-ff23-4ff4-8c4b-dc52fb221a9f
md"""
Interestingly there seems to be a specific vlue of stimuli for which the effect is maximized. This cis due to a saturation effect at high strength and at the same time an increase of integrator firing rate at medium strength.
"""

# ╔═╡ 2272966f-4592-4b99-963a-73925afa0159
md""" ### Influence of τ_integrator


"""

# ╔═╡ 2ecf69eb-8abc-41d9-ac82-f63be943b65d
begin
	map3d_script2 = zeros(2,9,5,15)
	τ_list = collect(0.1:0.1:1.5)
	vf2_list = collect(0.0:0.05:0.2)
	f1_list = collect(0.1:0.1:0.9)
	
	
	for (t,Tinter_s2) in enumerate([0.5,1.0])
	for (i,f1) in enumerate(collect(0.1:0.1:0.9))
		for (j,value_f2) in enumerate(collect(0.0:0.05:0.2))
			for (k,τ) in enumerate(collect(0.1:0.1:1.5))
	
general_args_script2 = Dict(
	"f1" => f1,
	"value_stim_f1" => 0.2,
	"Tinter" => Tinter_s2,
	"Tstim" => 0.5,
	"Tfin" => 120.0,
	"value_stim_f2" => value_f2,
    "τ_integrator" => τ
)
		data = load(datadir("sims","script2",savename("oddball_task",general_args_script2,"jld2")))

	mean_value = get_mean_firing_rate(data,"microcircuit1-ecell1","current-to-e1",general_args_script2["value_stim_f1"])
				
				map3d_script2[t,i,j,k] = mean_value
			end
		end
	end
	end
	
end

# ╔═╡ 1a3282e4-8f45-4e9c-9755-f05bc417f142
md""" 

Value for the interstimuli duration:
$@bind Tinter_s2 NumberField(0.5:1.0, default=1.0)


"""

# ╔═╡ 028d9c03-7872-4fcd-83ab-98a96a705850
md"""

Slider for f_1 on the next figure:

"""

# ╔═╡ 21517511-29cc-456d-a6ae-17e89bbfc378
@bind temp_f1 NumberField(0.1:0.9, default=0.9)

# ╔═╡ b51320a5-cd0b-498d-91de-c9af73643f85
begin
		fig_temp = Figure(resolution = (1000, 700), font = noto_sans)
	
	
	# ax1 for T=0.5
	ax_temp = Axis(fig_temp[1,1], xlabel = "value f2", ylabel = "τ integrator (s)",title="Duration inter stimuli = 0.5s")
	
	indice_f1 = Int(temp_f1*10)
	
	hm_temp = heatmap!(ax_temp,vf2_list,τ_list, map3d_script2[1,indice_f1,:,:], colormap = :blues)
	
	#ax2 for T = 1.0
	ax_temp2 = Axis(fig_temp[1,3], xlabel = "value f2", title="Duration inter stimuli = 1.0s")
	
	indice_f1 = Int(temp_f1*10)
	
	hm_temp2 = heatmap!(ax_temp2,vf2_list,τ_list, map3d_script2[2,indice_f1,:,:], colormap = :reds)
	
	

	
	
		Colorbar(fig_temp[1,2], hm_temp,label="Mean Firing rate (Hz)")
		Colorbar(fig_temp[1,4], hm_temp2,label="Mean Firing rate (Hz)")
	
		
	supertitle = fig_temp[0, :] = Label(fig_temp, "Mean firing rate (Hz) for f_1 = $temp_f1",
    textsize = 24, font = noto_sans_bold, color = (:black, 0.25))
	

	fig_temp
	
end

# ╔═╡ 185e0a7b-f9e7-4c32-bef6-2753a8ab0d7d
begin
	i=1
	
	
	
	temp_vf2 = vf2_list[i]
	fig_fixed_f2 = Figure(resolution = (1000, 700), font = noto_sans)
	
	#ax1 for the fig
	ax_fixed_f2 = Axis(fig_fixed_f2[1,1], xlabel = "value f1", ylabel = "τ integrator",title="Duration inter stimuli = 0.5s")
	
	hm_fixed_f2 = heatmap!(ax_fixed_f2,f1_list, τ_list, map3d_script2[1,:,i,:], colormap = :blues)
	Colorbar(fig_fixed_f2[1,2], hm_fixed_f2)
	
	
	#ax2 for the fig
	ax_fixed_f22 = Axis(fig_fixed_f2[1,3], xlabel = "value f1", title="Duration inter stimuli = 1.0s")
	
	hm_fixed_f22 = heatmap!(ax_fixed_f22,f1_list, τ_list, map3d_script2[2,:,i,:], colormap = :reds)
	Colorbar(fig_fixed_f2[1,4], hm_fixed_f22)
	
	
	# other fig things
	
	supertitle_f2 = fig_fixed_f2[0, :] = Label(fig_fixed_f2, "Mean firing rate (Hz) at fixed value stim f_2 = $temp_vf2",
    textsize = 24, font = noto_sans_bold, color = (:black, 0.25))
	
	
	fig_fixed_f2
	
end

# ╔═╡ cda81708-9117-4efe-9529-d047350c8737
begin
	#plot the Δfiring rate with respect to τ_integrator
	Δmap3D = map3d_script2[:,1,:,:] .- map3d_script2[:,9,:,:]
	
	
	figΔ = Figure(resolution = (1000, 700), font = noto_sans)
	axΔ = Axis(figΔ[1,1], xlabel = "value of stim f2", ylabel = "τ_integrator (s)", title="Duration interstimuli = 0.5s")
	
	
	hmΔ = heatmap!(axΔ, vf2_list, τ_list, Δmap3D[1,:,:], colormap=:blues)
	Colorbar(figΔ[1,2], hmΔ, label="Δfiring rate")

	
	axΔ2 = Axis(figΔ[1,3], xlabel = "value of stim f2",  title="Duration interstimuli = 1.0s")
	
	
	hmΔ2 = heatmap!(axΔ2, vf2_list, τ_list, Δmap3D[2,:,:], colormap=:blues)
	Colorbar(figΔ[1,4], hmΔ2, label="Δfiring rate")
	
	
	supertitleΔ = figΔ[0, :] = Label(figΔ, "ΔMean firing rate (Hz)",
    textsize = 24, font = noto_sans_bold, color = (:black, 0.25))
	
	figΔ
	
	
end

# ╔═╡ 417005d6-c845-4e9d-866a-b6e0bd274973
md""" ### More detailed analysis of τ_integrator influence


"""

# ╔═╡ b9cb03b0-5c5e-4fd4-88a8-096ee69e5cd4
md"""
Slider for f_1 on the next figure:


$@bind f1_lines NumberField(0.1:0.9, default=0.9)

"""

# ╔═╡ c3cfefcf-405e-4ca1-9251-cfe00f90c550
begin

	fig_lines = Figure(resolution=(1000,700))
	ax_lines = Axis(fig_lines[1,1],xlabel="τ_integrator (s)", ylabel="Firing rate", title="Frequency =$f1_lines ")
	
	temp_lines = Int(f1_lines*10)
	
	lines!(ax_lines,τ_list,map3d_script2[1,temp_lines,1
			,:],label="Intersitmulus = 0.5s",linewidth=4)
	lines!(ax_lines,τ_list,map3d_script2[2,temp_lines,1,:],label="Intersitmulus = 1.0s",linewidth=4)
	

	fig_lines[1, 2] = Legend(fig_lines, ax_lines, "Legend", framevisible = false)
	fig_lines
	
end

# ╔═╡ 6cb7e02d-268a-4b97-aed8-6bfd3fce7872
begin
	
	fig_linesΔ = Figure(resolution=(1000,700))
	ax_linesΔ = Axis(fig_linesΔ[1,1],xlabel="τ_integrator (s)", ylabel="Firing rate", title="Δ firing rate ")
	
	
	lines!(ax_linesΔ,τ_list,map3d_script2[1,1,1
			,:].-map3d_script2[1,9,1
			,:],label="Intersitmulus = 0.5s",linewidth=4)
	lines!(ax_linesΔ,τ_list,map3d_script2[2,1,1,:].-map3d_script2[2,9,1,:],label="Intersitmulus = 1.0s",linewidth=4)
	

	fig_linesΔ[1, 2] = Legend(fig_linesΔ, ax_linesΔ, "Legend", framevisible = false)
	fig_linesΔ
	
end

# ╔═╡ 9f9f29c3-b6eb-4483-baef-979459169727


# ╔═╡ 3ae4e7a2-19e2-4533-9146-295bbb1e0cb6


# ╔═╡ Cell order:
# ╟─b061c950-0369-45ce-9e55-79442a1829b7
# ╠═297ff700-ebcc-11eb-22f0-77c734d7bf4d
# ╠═6b746196-be0f-47a3-9512-6a70a77b48a4
# ╠═4a7d92c1-203c-43e2-b6ae-43023008a440
# ╟─1fb29f97-0611-4a55-9b27-9fa1c944c46f
# ╟─10f66877-0d09-4820-ad32-ed41afdcfcf0
# ╟─9836a960-2172-49f9-809b-2175d86ce6c0
# ╟─ecfb4d83-67b5-45c1-b54c-24d422b0577d
# ╠═782503e9-9358-4dbc-8232-005710bac4f2
# ╟─14b7bff5-da85-4d96-baab-170136c272f2
# ╟─ae6e757d-2c26-4933-8a2e-cba17228ea1f
# ╟─0abb83ce-a761-4939-b4f2-36c25bcf5fd5
# ╠═e6dd98f5-da6d-42cb-a04e-374cf97c0be8
# ╟─7b3f6f1b-4c6a-4fa2-86c7-6e3eb8c5ab6e
# ╠═b74119b3-be26-4ef9-97c8-60ad88f936f6
# ╟─97e728c0-661d-459c-91ea-46ecd4a2f592
# ╟─09a3fdb0-963f-4b24-87d8-90ce6f119a78
# ╟─19c61b2b-ff23-4ff4-8c4b-dc52fb221a9f
# ╟─2272966f-4592-4b99-963a-73925afa0159
# ╟─2ecf69eb-8abc-41d9-ac82-f63be943b65d
# ╠═1a3282e4-8f45-4e9c-9755-f05bc417f142
# ╟─028d9c03-7872-4fcd-83ab-98a96a705850
# ╟─21517511-29cc-456d-a6ae-17e89bbfc378
# ╟─b51320a5-cd0b-498d-91de-c9af73643f85
# ╠═185e0a7b-f9e7-4c32-bef6-2753a8ab0d7d
# ╟─cda81708-9117-4efe-9529-d047350c8737
# ╟─417005d6-c845-4e9d-866a-b6e0bd274973
# ╟─b9cb03b0-5c5e-4fd4-88a8-096ee69e5cd4
# ╠═c3cfefcf-405e-4ca1-9251-cfe00f90c550
# ╠═6cb7e02d-268a-4b97-aed8-6bfd3fce7872
# ╠═9f9f29c3-b6eb-4483-baef-979459169727
# ╠═3ae4e7a2-19e2-4533-9146-295bbb1e0cb6
